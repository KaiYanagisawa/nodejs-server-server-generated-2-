"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestSchemaPreprocessor = void 0;
const ajv_1 = require("../../framework/ajv");
const httpMethods = new Set([
    'get',
    'put',
    'post',
    'delete',
    'options',
    'head',
    'patch',
    'trace',
]);
class RequestSchemaPreprocessor {
    constructor(apiDoc, options) {
        this.ajv = ajv_1.createRequestAjv(apiDoc, options);
        this.apiDoc = apiDoc;
    }
    preProcess() {
        const paths = Object.keys(this.apiDoc.paths);
        paths.forEach((p) => {
            const piOrRef = this.apiDoc.paths[p];
            const pathItem = piOrRef.$ref
                ? this.ajv.getSchema(piOrRef.$ref).schema
                : piOrRef;
            for (const pathItemKey of Object.keys(pathItem)) {
                if (httpMethods.has(pathItemKey)) {
                    this.preprocessRequestBody(pathItemKey, pathItem);
                    this.preprocessPathLevelParameters(pathItemKey, pathItem);
                }
            }
        });
    }
    preprocessRequestBody(pathItemKey, pathItem) {
        var _a, _b;
        const v = pathItem[pathItemKey];
        const ref = (_a = v === null || v === void 0 ? void 0 : v.requestBody) === null || _a === void 0 ? void 0 : _a.$ref;
        const requestBody = ((ref ? (_b = this.ajv.getSchema(ref)) === null || _b === void 0 ? void 0 : _b.schema : v.requestBody));
        if (!(requestBody === null || requestBody === void 0 ? void 0 : requestBody.content))
            return;
        const contentEntries = Object.entries(requestBody.content);
        for (const [_, mediaTypeObject] of contentEntries) {
            this.cleanseContentSchema(mediaTypeObject);
        }
    }
    preprocessPathLevelParameters(pathItemKey, pathItem) {
        var _a, _b, _c;
        const parameters = (_a = pathItem.parameters) !== null && _a !== void 0 ? _a : [];
        if (parameters.length === 0)
            return;
        let v = pathItem[pathItemKey];
        if (v === parameters)
            return;
        const ref = (_b = v === null || v === void 0 ? void 0 : v.parameters) === null || _b === void 0 ? void 0 : _b.$ref;
        const op = ref && ((_c = this.ajv.getSchema(ref)) === null || _c === void 0 ? void 0 : _c.schema);
        if (op)
            v = op;
        v.parameters = v.parameters || [];
        for (const param of parameters) {
            v.parameters.push(param);
        }
    }
    cleanseContentSchema(content) {
        // remove required if readonly
        const removeRequiredForReadOnly = (prop, schema) => {
            const propertyValue = schema.properties[prop];
            const required = schema.required;
            if (propertyValue.readOnly && required) {
                const index = required.indexOf(prop);
                if (index > -1) {
                    schema.required = required
                        .slice(0, index)
                        .concat(required.slice(index + 1));
                    if (schema.required.length === 0) {
                        delete schema.required;
                    }
                }
            }
        };
        // traverse schema
        this.traverse(content.schema, removeRequiredForReadOnly);
        return content.schema;
    }
    traverse(schema, f) {
        var _a;
        const schemaObj = schema.hasOwnProperty('$ref')
            ? (_a = this.ajv.getSchema(schema['$ref'])) === null || _a === void 0 ? void 0 : _a.schema
            : schema;
        if (schemaObj.allOf) {
            schemaObj.allOf.forEach((s) => this.traverse(s, f));
        }
        else if (schemaObj.oneOf) {
            schemaObj.oneOf.forEach((s) => this.traverse(s, f));
        }
        else if (schemaObj.anyOf) {
            schemaObj.anyOf.forEach((s) => this.traverse(s, f));
        }
        else if (schemaObj.properties) {
            Object.keys(schemaObj.properties).forEach((prop) => {
                f(prop, schemaObj);
            });
        }
    }
}
exports.RequestSchemaPreprocessor = RequestSchemaPreprocessor;
//# sourceMappingURL=request.schema.preprocessor.js.map